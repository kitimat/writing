{"version":3,"sources":["src/service-worker.ts"],"names":[],"mappings":";AAiBA,aAjBA,IAAM,EAAN,iBAAA,OAAA,4BACM,EAAkC,KAExC,EAAM,iBAAiB,WAAY,SAAA,GACjC,EAAM,UACJ,OACG,OACA,KAAK,SAAA,GACJ,OAAA,QAAQ,IACN,EACG,OAAO,SAAA,GAAa,OAAA,IAAc,IAClC,IAAI,SAAA,GAAa,OAAA,OAAO,OAAO,WAM5C,EAAM,iBAAiB,QAAS,SAAA,GAC9B,EAAM,YACJ,OAAO,KAAK,GAAW,KAAK,SAAA,GACnB,OAAA,EAAM,MAAM,EAAM,SAAS,KAAK,SAAA,GAEnC,OAAA,GACA,MAAM,EAAM,SAAS,KAAK,SAAA,GACpB,OAAsC,IAAtC,EAAM,QAAQ,IAAI,QAAQ,QAErB,GAGT,EAAM,IAAI,EAAM,QAAS,EAAK,SACvB","file":"service-worker.js","sourceRoot":"..","sourcesContent":["const CACHE_KEY = `writing-cache-${process.env.BUILD_ID}`;\nconst scope: ServiceWorkerGlobalScope = self as any;\n\nscope.addEventListener(\"activate\", event => {\n  event.waitUntil(\n    caches\n      .keys()\n      .then(cacheNames =>\n        Promise.all(\n          cacheNames\n            .filter(cacheName => cacheName !== CACHE_KEY)\n            .map(cacheName => caches.delete(cacheName))\n        )\n      )\n  );\n});\n\nscope.addEventListener(\"fetch\", event => {\n  event.respondWith(\n    caches.open(CACHE_KEY).then(cache => {\n      return cache.match(event.request).then(resA => {\n        return (\n          resA ||\n          fetch(event.request).then(resB => {\n            if (event.request.url.indexOf(\"http\") !== 0) {\n              // not an HTTP request so don't cache\n              return resB;\n            }\n\n            cache.put(event.request, resB.clone());\n            return resB;\n          })\n        );\n      });\n    })\n  );\n});\n"]}